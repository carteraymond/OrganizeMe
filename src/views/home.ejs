<!DOCTYPE html>
<html>
<head>
    <title>Home</title>
    <link rel="stylesheet" href="/styles/main.css">
    <script defer>
        let currentTasks = [];
        let activeFilters = {
            status: [],
            priority: []
        };
        let currentSort = {
            field: null,
            direction: 'asc'
        };
        async function handleResponse(response, errorMessage) {
            if (response.status === 401) {
                // If 401, refresh the page to clear the session
                window.location.reload();
                return null;
            }
            if (!response.ok) {
                throw new Error(errorMessage);
            }
            return response.json();
        }
        // Fetch and display tasks when page loads
        window.onload = async function() {
            await fetchTasks();
        }

        // Modal controls
        function openModal(modalId) {
            document.getElementById(modalId).classList.add('active');
        }

        function closeModal(modalId) {
            document.getElementById(modalId).classList.remove('active');
        }

        // Close modal if clicked outside
        window.onclick = function(event) {
            const modals = document.getElementsByClassName('modal');
            for (let modal of modals) {
                if (event.target === modal) {
                    modal.classList.remove('active');
                }
            }
        }

        // Get all tasks
        async function fetchTasks() {
            try {
                const response = await fetch('/api/task', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                const data = await handleResponse(response, 'Error fetching tasks');
                if (data && data.tasks) {
                    currentTasks = data.tasks;
                    applyFiltersAndSort();
                }
            } catch (error) {
                console.error('Error fetching tasks:', error);
                document.getElementById('taskList').innerHTML = '<div class="empty-state">Error loading tasks</div>';
            }
        }

        // Sort tasks by field, toggle direction if already sorted by the same field
        function sortTasks(field) {
            if (currentSort.field === field) {
                currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
            } else {
                currentSort.field = field;
                currentSort.direction = 'asc';
            }
            
            applyFiltersAndSort();
            updateSortButtons();
        }

        // Update the sort buttons to reflect the current sort state
        function updateSortButtons() {
            const buttons = document.querySelectorAll('.fab-sort');
            buttons.forEach(button => {
                const field = button.getAttribute('data-sort');
                if (field === currentSort.field) {
                    button.classList.add('active');
                    button.title = `${button.getAttribute('data-label')} (${currentSort.direction === 'asc' ? 'Ascending' : 'Descending'})`;
                } else {
                    button.classList.remove('active');
                    button.title = `Sort by ${button.getAttribute('data-label')}`;
                }
            });
        }

        // Toggle a filter on or off per type and value
        function toggleFilter(type, value) {
            const index = activeFilters[type].indexOf(value);
            if (index === -1) {
                activeFilters[type].push(value);
            } else {
                activeFilters[type].splice(index, 1);
            }
            
            // Update checkbox states
            const checkbox = document.querySelector(`input[data-filter="${type}-${value}"]`);
            checkbox.checked = index === -1;
            
            applyFiltersAndSort();
        }

        // update the tasks based on the filters and sort
        function applyFiltersAndSort() {
            let filteredTasks = currentTasks.filter(task => {
                if (activeFilters.status.length > 0 && !activeFilters.status.includes(task.status?.toLowerCase())) {
                    return false;
                }
                if (activeFilters.priority.length > 0 && !activeFilters.priority.includes(task.priority?.toLowerCase())) {
                    return false;
                }
                return true;
            });

            if (currentSort.field) {
                filteredTasks.sort((a, b) => {
                    let valueA = a[currentSort.field];
                    let valueB = b[currentSort.field];
                    
                    // Dates are special (not in a good way)
                    if (currentSort.field === 'dueDate') {
                        valueA = new Date(valueA);
                        valueB = new Date(valueB);
                    }
                    
                    if (valueA < valueB) return currentSort.direction === 'asc' ? -1 : 1;
                    if (valueA > valueB) return currentSort.direction === 'asc' ? 1 : -1;
                    return 0;
                });
            }

            displayTasks(filteredTasks);
        }

        // Get the appropriate class for the status badge
        function getStatusClass(status) {
            switch(status?.toLowerCase()) {
                case 'completed': return 'status-completed';
                case 'in-progress': return 'status-progress';
                default: return 'status-pending';
            }
        }

        // Get the appropriate class for the priority badge
        function getPriorityClass(priority) {
            switch(priority?.toLowerCase()) {
                case 'high': return 'priority-high';
                case 'medium': return 'priority-medium';
                default: return 'priority-low';
            }
        }

        // Display tasks in the UI and cry
        function displayTasks(tasks) {
            const taskList = document.getElementById('taskList');
            if (!tasks || tasks.length === 0) {
                taskList.innerHTML = '<div class="empty-state">No tasks found. Click the + button to create one!</div>';
                return;
            }

            const taskHTML = tasks.map(task => `
                <div class="task-card">
                    <div class="task-header">
                        <h3 class="task-title">${task.title}</h3>
                        <span class="status-badge ${getStatusClass(task.status)}">
                            ${task.status || 'Pending'}
                        </span>
                    </div>
                    <p class="task-description" title="${task.description}">${task.description}</p>
                    <div class="task-metadata">
                        <div class="due-date">
                            <span class="metadata-label">Due:</span>
                            ${new Date(task.dueDate).toLocaleDateString('en-US', { 
                                year: 'numeric',
                                month: 'short',
                                day: 'numeric'
                            })}
                        </div>
                    </div>
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 1rem;">
                        <div>
                            <span class="priority-badge ${getPriorityClass(task.priority)}">
                                ${task.priority || 'Low'} Priority
                            </span>
                            <div class="task-tags">
                                ${task.tags ? task.tags.map(tag => `
                                    <span class="tag">${tag}</span>
                                `).join('') : ''}
                            </div>
                        </div>
                        <div class="task-actions">
                            <button class="edit-button" onclick="openEditModal('${task._id}')">Edit</button>
                            <button class="delete-button" onclick="deleteTask('${task._id}')">Delete</button>
                        </div>
                    </div>
                </div>
            `).join('');

            taskList.innerHTML = taskHTML;
        }

        async function openEditModal(taskId) {
            const task = currentTasks.find(t => t._id === taskId);
            if (!task) return;

            document.getElementById('editTaskId').value = task._id;
            document.getElementById('editTaskTitle').value = task.title;
            document.getElementById('editTaskDescription').value = task.description;
            document.getElementById('editTaskDueDate').value = new Date(task.dueDate).toISOString().split('T')[0];
            document.getElementById('editTaskStatus').value = task.status || 'pending';
            document.getElementById('editTaskPriority').value = task.priority || 'low';
            document.getElementById('editTaskTags').value = task.tags ? task.tags.join(', ') : '';

            openModal('editTaskModal');
        }

        async function updateTask(event) {
            event.preventDefault();
            
            const taskId = document.getElementById('editTaskId').value;
            const formData = {
                title: document.getElementById('editTaskTitle').value,
                description: document.getElementById('editTaskDescription').value,
                dueDate: document.getElementById('editTaskDueDate').value,
                status: document.getElementById('editTaskStatus').value,
                priority: document.getElementById('editTaskPriority').value,
                tags: document.getElementById('editTaskTags').value.split(',').map(tag => tag.trim()).filter(tag => tag)
            };

            try {
                const response = await fetch(`/api/task/${taskId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });
                
                const data = await handleResponse(response, 'Error updating task');
                if (data) {
                    closeModal('editTaskModal');
                    await fetchTasks();
                }
            } catch (error) {
                console.error('Error updating task:', error);
            }
        }

        async function createTask(event) {
            event.preventDefault();
            
            const formData = {
                title: document.getElementById('taskTitle').value,
                description: document.getElementById('taskDescription').value,
                dueDate: document.getElementById('taskDueDate').value,
                status: document.getElementById('taskStatus').value,
                priority: document.getElementById('taskPriority').value,
                tags: document.getElementById('taskTags').value.split(',').map(tag => tag.trim()).filter(tag => tag)
            };

            try {
                const response = await fetch('/api/task', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });

                const data = await handleResponse(response, 'Error creating task');
                if (data) {
                    document.getElementById('createTaskForm').reset();
                    closeModal('createTaskModal');
                    await fetchTasks();
                }
            } catch (error) {
                console.error('Error creating task:', error);
            }
        }

        async function deleteTask(taskId) {
            if (!confirm('Are you sure you want to delete this task?')) {
                return;
            }

            try {
                const response = await fetch(`/api/task/${taskId}`, {
                    method: 'DELETE'
                });

                const data = await handleResponse(response, 'Error deleting task');
                if (data) {
                    await fetchTasks();
                }
            } catch (error) {
                console.error('Error deleting task:', error);
            }
        }

        
    </script>
</head>
<body>
    <div class="container">
        <a href="/token/manage" class="back-link" id="api-tokens-button">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M21 2l-2 2m-7.61 7.61a5.5 5.5 0 1 1-7.778 7.778 5.5 5.5 0 0 1 7.777-7.777zm0 0L15.5 7.5m0 0l3 3L22 7l-3-3m-3.5 3.5L19 4"></path>
            </svg>
            Manage API Tokens
        </a>
        <h1>Welcome, <%= user.name %>!</h1>
        <div id="taskList" class="task-list">
        </div>

        <!-- Floating Action Buttons -->
        <div class="fab-container">
            <button class="fab fab-sort" data-sort="dueDate" data-label="Due Date" onclick="sortTasks('dueDate')" title="Sort by Due Date">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                    <line x1="16" y1="2" x2="16" y2="6"></line>
                    <line x1="8" y1="2" x2="8" y2="6"></line>
                    <line x1="3" y1="10" x2="21" y2="10"></line>
                </svg>
            </button>
            <button class="fab fab-sort" data-sort="priority" data-label="Priority" onclick="sortTasks('priority')" title="Sort by Priority">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M2 20h.01"></path>
                    <path d="M7 20v-4"></path>
                    <path d="M12 20v-8"></path>
                    <path d="M17 20v-12"></path>
                </svg>
            </button>
            <button class="fab fab-sort" data-sort="status" data-label="Status" onclick="sortTasks('status')" title="Sort by Status">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                    <polyline points="22 4 12 14.01 9 11.01"></polyline>
                </svg>
            </button>
            <button class="fab fab-filter" onclick="openModal('filterModal')" title="Filter Tasks">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3"></polygon>
                </svg>
            </button>
            <button class="fab fab-add" onclick="openModal('createTaskModal')" title="Create New Task">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <line x1="12" y1="5" x2="12" y2="19"></line>
                    <line x1="5" y1="12" x2="19" y2="12"></line>
                </svg>
            </button>
        </div>

        <!-- Create Task Modal -->
        <div id="createTaskModal" class="modal">
            <div class="modal-content">
                <button class="close-modal" onclick="closeModal('createTaskModal')">&times;</button>
                <h2>Create New Task</h2>
                <form id="createTaskForm" onsubmit="createTask(event)">
                    <div class="form-group">
                        <label for="taskTitle">Title</label>
                        <input type="text" id="taskTitle" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="taskDescription">Description</label>
                        <textarea id="taskDescription" required></textarea>
                    </div>
                    
                    <div class="form-group">
                        <label for="taskDueDate">Due Date</label>
                        <input type="date" id="taskDueDate" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="taskStatus">Status</label>
                        <select id="taskStatus">
                            <option value="pending">Pending</option>
                            <option value="in-progress">In Progress</option>
                            <option value="completed">Completed</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="taskPriority">Priority</label>
                        <select id="taskPriority">
                            <option value="low">Low</option>
                            <option value="medium">Medium</option>
                            <option value="high">High</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="taskTags">Tags (comma-separated)</label>
                        <input type="text" id="taskTags" placeholder="e.g., work, urgent, meeting">
                    </div>
                    
                    <div class="button-group">
                        <button type="button" class="secondary-button" onclick="closeModal('createTaskModal')">Cancel</button>
                        <button type="submit" class="primary-button">Create Task</button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Filter Modal -->
        <div id="filterModal" class="modal">
            <div class="modal-content">
                <button class="close-modal" onclick="closeModal('filterModal')">&times;</button>
                <h2>Filter Tasks</h2>
                
                <div class="filter-section">
                    <h3>Status</h3>
                    <div class="checkbox-group">
                        <label class="checkbox-label">
                            <input type="checkbox" data-filter="status-pending" onchange="toggleFilter('status', 'pending')">
                            Pending
                        </label>
                        <label class="checkbox-label">
                            <input type="checkbox" data-filter="status-in-progress" onchange="toggleFilter('status', 'in-progress')">
                            In Progress
                        </label>
                        <label class="checkbox-label">
                            <input type="checkbox" data-filter="status-completed" onchange="toggleFilter('status', 'completed')">
                            Completed
                        </label>
                    </div>
                </div>
                
                <div class="filter-section">
                    <h3>Priority</h3>
                    <div class="checkbox-group">
                        <label class="checkbox-label">
                            <input type="checkbox" data-filter="priority-high" onchange="toggleFilter('priority', 'high')">
                            High
                        </label>
                        <label class="checkbox-label">
                            <input type="checkbox" data-filter="priority-medium" onchange="toggleFilter('priority', 'medium')">
                            Medium
                        </label>
                        <label class="checkbox-label">
                            <input type="checkbox" data-filter="priority-low" onchange="toggleFilter('priority', 'low')">
                            Low
                        </label>
                    </div>
                </div>
            </div>
        </div>
    <!-- Edit Task Modal -->
    <div id="editTaskModal" class="modal">
        <div class="modal-content">
            <button class="close-modal" onclick="closeModal('editTaskModal')">&times;</button>
            <h2>Edit Task</h2>
            <form id="editTaskForm" onsubmit="updateTask(event)">
                <input type="hidden" id="editTaskId">
                
                <div class="form-group">
                    <label for="editTaskTitle">Title</label>
                    <input type="text" id="editTaskTitle" required>
                </div>
                
                <div class="form-group">
                    <label for="editTaskDescription">Description</label>
                    <textarea id="editTaskDescription" required></textarea>
                </div>
                
                <div class="form-group">
                    <label for="editTaskDueDate">Due Date</label>
                    <input type="date" id="editTaskDueDate" required>
                </div>
                
                <div class="form-group">
                    <label for="editTaskStatus">Status</label>
                    <select id="editTaskStatus">
                        <option value="pending">Pending</option>
                        <option value="in-progress">In Progress</option>
                        <option value="completed">Completed</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="editTaskPriority">Priority</label>
                    <select id="editTaskPriority">
                        <option value="low">Low</option>
                        <option value="medium">Medium</option>
                        <option value="high">High</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="editTaskTags">Tags (comma-separated)</label>
                    <input type="text" id="editTaskTags" placeholder="e.g., work, urgent, meeting">
                </div>
                
                <div class="button-group">
                    <button type="button" class="secondary-button" onclick="closeModal('editTaskModal')">Cancel</button>
                    <button type="submit" class="primary-button">Update Task</button>
                </div>
            </form>
        </div>
    </div>
</div>
</body>
</html>