<!DOCTYPE html>
<html>
<head>
    <title>Home</title>
    <link rel="stylesheet" href="/styles/main.css">
    <script defer>
        let categories = [];
        let currentTasks = [];
        let activeFilters = {
            status: [],
            priority: [],
            category: []
        };
        let currentSort = {
            field: null,
            direction: 'asc'
        };
        async function handleResponse(response, errorMessage) {
            if (response.status === 401) {
                // If 401, refresh the page to clear the session
                window.location.reload();
                return null;
            }
            
            const data = await response.json();
            if (!response.ok) {
                throw new Error(data.error || errorMessage);
            }
            return data;
        }

        
        // Fetch and display tasks when page loads
        window.onload = async function() {
            await Promise.all([fetchTasks(), fetchCategories()]);
    }
    async function createCategory(event) {
    event.preventDefault();
    
    const name = document.getElementById('categoryName').value;
    const colorHex = document.getElementById('categoryColor').value;
    
    try {
        const response = await fetch('/api/category', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ name, colorHex })
        });

        const data = await handleResponse(response, 'Error creating category');
        if (data && data.success) {
            document.getElementById('createCategoryForm').reset();
            await fetchCategories();
            showAlert('Category created successfully', 'success');
        }
    } catch (error) {
        console.error('Error creating category:', error);
        showAlert(error.message, 'error');
    }
}


        async function deleteCategory(categoryId) {
            if (!confirm('Are you sure you want to delete this category? Tasks associated with this category will be unaffected.')) {
                return;
            }

            try {
                const response = await fetch(`/api/category/${categoryId}`, {
                    method: 'DELETE'
                });

                const data = await handleResponse(response, 'Error deleting category');
                if (data && data.success) {
                    await fetchCategories();
                    showAlert('Category deleted successfully', 'success');
                }
            } catch (error) {
                console.error('Error deleting category:', error);
                showAlert(error.message, 'error');
            }
        }
        function showAlert(message, type = 'success') {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert ${type}`;
            alertDiv.textContent = message;
            document.body.appendChild(alertDiv);
            setTimeout(() => alertDiv.remove(), 3000);
        }


        function updateCategoryList() {
    const categoryList = document.getElementById('categoryList');
    if (!categories || categories.length === 0) {
        categoryList.innerHTML = '<div class="empty-state">No categories yet. Create one below!</div>';
        return;
    }

    categoryList.innerHTML = categories.map(category => `
        <div class="category-item">
            <div class="category-info">
                <div class="color-preview" style="background-color: ${category.colorHex}"></div>
                <span>${category.name}</span>
            </div>
            <button class="delete-button" onclick="deleteCategory('${category._id}')">Delete</button>
        </div>
    `).join('');
}
function updateCategoryDropdowns() {
    const createDropdown = document.getElementById('taskCategory');
    const editDropdown = document.getElementById('editTaskCategory');
    
    const options = categories.map(category => `
        <option value="${category._id}">
            ${category.name}
        </option>
    `).join('');
    
    const defaultOption = '<option value="">No Category</option>';
    
    if (createDropdown) createDropdown.innerHTML = defaultOption + options;
    if (editDropdown) editDropdown.innerHTML = defaultOption + options;
}
        function updateCategoryList() {
            const categoryList = document.getElementById('categoryList');
            if (!categories || categories.length === 0) {
                categoryList.innerHTML = '<div class="empty-state">No categories yet. Create one below!</div>';
                return;
            }

    categoryList.innerHTML = categories.map(category => `
        <div class="category-item">
            <div class="category-info">
                <div class="color-preview" style="background-color: ${category.colorHex}"></div>
                <span>${category.name}</span>
            </div>
            <button class="delete-button" onclick="deleteCategory('${category._id}')">Delete</button>
        </div>
    `).join('');
}

        async function fetchCategories() {
            try {
                const response = await fetch('/api/category', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                const data = await handleResponse(response, 'Error fetching categories');
                if (data && data.success && data.categories) {
                    categories = data.categories;
                    updateCategoryDropdowns();
                    updateCategoryList();
                    updateCategoryFilters();
                }
            } catch (error) {
                console.error('Error fetching categories:', error);
                showAlert(error.message, 'error');
            }
        }

        // Modal controls
        function openModal(modalId) {
            document.getElementById(modalId).classList.add('active');
        }

        function closeModal(modalId) {
            document.getElementById(modalId).classList.remove('active');
        }

        // Close modal if clicked outside
        window.onclick = function(event) {
            const modals = document.getElementsByClassName('modal');
            for (let modal of modals) {
                if (event.target === modal) {
                    modal.classList.remove('active');
                }
            }
        }

        // Get all tasks
        async function fetchTasks() {
            try {
                const response = await fetch('/api/task', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                const data = await handleResponse(response, 'Error fetching tasks');
                if (data && data.tasks) {
                    currentTasks = data.tasks;
                    applyFiltersAndSort();
                }
            } catch (error) {
                console.error('Error fetching tasks:', error);
                document.getElementById('taskList').innerHTML = '<div class="empty-state">Error loading tasks</div>';
            }
        }

        // Sort tasks by field, toggle direction if already sorted by the same field
        function sortTasks(field) {
            if (currentSort.field === field) {
                currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
            } else {
                currentSort.field = field;
                currentSort.direction = 'asc';
            }
            
            applyFiltersAndSort();
            updateSortButtons();
        }

        // Update the sort buttons to reflect the current sort state
        function updateSortButtons() {
            const buttons = document.querySelectorAll('.fab-sort');
            buttons.forEach(button => {
                const field = button.getAttribute('data-sort');
                if (field === currentSort.field) {
                    button.classList.add('active');
                    button.title = `${button.getAttribute('data-label')} (${currentSort.direction === 'asc' ? 'Ascending' : 'Descending'})`;
                } else {
                    button.classList.remove('active');
                    button.title = `Sort by ${button.getAttribute('data-label')}`;
                }
            });
        }

        // Toggle a filter on or off per type and value
        function toggleFilter(type, value) {
            const index = activeFilters[type].indexOf(value);
            if (index === -1) {
                activeFilters[type].push(value);
            } else {
                activeFilters[type].splice(index, 1);
            }
            
            // Update checkbox state
            const checkbox = document.querySelector(`input[data-filter="${type}-${value}"]`);
            if (checkbox) {
                checkbox.checked = index === -1;
            }
            
            applyFiltersAndSort();
        }

        // update the tasks based on the filters and sort
        function applyFiltersAndSort() {
            let filteredTasks = currentTasks.filter(task => {
                if (activeFilters.status.length > 0 && !activeFilters.status.includes(task.status?.toLowerCase())) {
                    return false;
                }
                if (activeFilters.priority.length > 0 && !activeFilters.priority.includes(task.priority?.toLowerCase())) {
                    return false;
                }
                if (activeFilters.category.length > 0) {
                    // Handle both cases where task has no category or has a category
                    if (!task.categoryId) return false;
                    if (!activeFilters.category.includes(task.categoryId._id)) {
                        return false;
                    }
                }
                return true;
            });

            if (currentSort.field) {
                filteredTasks.sort((a, b) => {
                    let valueA = a[currentSort.field];
                    let valueB = b[currentSort.field];
                    
                    if (currentSort.field === 'dueDate') {
                        valueA = new Date(valueA);
                        valueB = new Date(valueB);
                    }
                    
                    if (valueA < valueB) return currentSort.direction === 'asc' ? -1 : 1;
                    if (valueA > valueB) return currentSort.direction === 'asc' ? 1 : -1;
                    return 0;
                });
            }

            displayTasks(filteredTasks);
        }

        // Get the appropriate class for the status badge
        function getStatusClass(status) {
            switch(status?.toLowerCase()) {
                case 'completed': return 'status-completed';
                case 'in-progress': return 'status-progress';
                default: return 'status-pending';
            }
        }

        // Get the appropriate class for the priority badge
        function getPriorityClass(priority) {
            switch(priority?.toLowerCase()) {
                case 'high': return 'priority-high';
                case 'medium': return 'priority-medium';
                default: return 'priority-low';
            }
        }

        // Display tasks in the UI and cry
        function displayTasks(tasks) {
            const taskList = document.getElementById('taskList');
            if (!tasks || tasks.length === 0) {
                taskList.innerHTML = '<div class="empty-state">No tasks found. Click the + button to create one!</div>';
                return;
            }

            const taskHTML = tasks.map(task => `
                <div class="task-card">
                    <div class="task-header">
                        <h3 class="task-title">${task.title}</h3>
                        <span class="status-badge ${getStatusClass(task.status)}">
                            ${task.status || 'Pending'}
                        </span>
                    </div>
                    <p class="task-description" title="${task.description}">${task.description}</p>
                                        <div class="task-metadata">
                        <div class="due-date">
                            <span class="metadata-label">Due:</span>
                            ${new Date(task.dueDate).toLocaleDateString('en-US', { 
                                year: 'numeric',
                                month: 'short',
                                day: 'numeric'
                            })}
                        </div>
                    </div>
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 1rem;">
                        <div>
                            <span class="priority-badge ${getPriorityClass(task.priority)}">
                                ${task.priority || 'Low'} Priority
                            </span>
                        ${task.categoryId && task.categoryId.name ? `
                        <div class="category-badge" style="
                            background-color: ${task.categoryId.colorHex}20;
                            color: ${task.categoryId.colorHex};
                            border: 1px solid ${task.categoryId.colorHex};
                            display: inline-block;
                            padding: 0.25rem 0.75rem;
                            border-radius: 1rem;
                            margin: 0.5rem 0;
                            font-size: 0.875rem;">
                            ${task.categoryId.name}
                        </div>
                    ` : ''}
                    </div>
                        <div class="task-actions">
                            <button class="edit-button" onclick="openEditModal('${task._id}')">Edit</button>
                            <button class="delete-button" onclick="deleteTask('${task._id}')">Delete</button>
                        </div>
                    </div>
                </div>
            `).join('');

            taskList.innerHTML = taskHTML;
        }

        async function openEditModal(taskId) {
            const task = currentTasks.find(t => t._id === taskId);
            if (!task) return;

            document.getElementById('editTaskId').value = task._id;
            document.getElementById('editTaskTitle').value = task.title;
            document.getElementById('editTaskDescription').value = task.description;
            document.getElementById('editTaskDueDate').value = new Date(task.dueDate).toISOString().split('T')[0];
            document.getElementById('editTaskStatus').value = task.status || 'pending';
            document.getElementById('editTaskPriority').value = task.priority || 'low';
            document.getElementById('editTaskTags').value = task.tags ? task.tags.join(', ') : '';
            document.getElementById('editTaskCategory').value = task.categoryId?._id || '';

            openModal('editTaskModal');
        }


        async function updateTask(event) {
            event.preventDefault();
            
            const taskId = document.getElementById('editTaskId').value;
            const formData = {
                title: document.getElementById('editTaskTitle').value,
                description: document.getElementById('editTaskDescription').value,
                dueDate: document.getElementById('editTaskDueDate').value,
                status: document.getElementById('editTaskStatus').value,
                priority: document.getElementById('editTaskPriority').value,
                tags: document.getElementById('editTaskTags').value.split(',').map(tag => tag.trim()).filter(tag => tag),
                categoryId: document.getElementById('editTaskCategory').value || null
            };

            try {
                const response = await fetch(`/api/task/${taskId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });
                
                const data = await handleResponse(response, 'Error updating task');
                if (data) {
                    closeModal('editTaskModal');
                    await fetchTasks();
                }
            } catch (error) {
                console.error('Error updating task:', error);
            }
        }

        async function createTask(event) {
            event.preventDefault();
            
            const formData = {
                title: document.getElementById('taskTitle').value,
                description: document.getElementById('taskDescription').value,
                dueDate: document.getElementById('taskDueDate').value,
                status: document.getElementById('taskStatus').value,
                priority: document.getElementById('taskPriority').value,
                tags: document.getElementById('taskTags').value.split(',').map(tag => tag.trim()).filter(tag => tag),
                categoryId: document.getElementById('taskCategory').value || null
            };

            try {
                const response = await fetch('/api/task', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });

                const data = await handleResponse(response, 'Error creating task');
                if (data) {
                    document.getElementById('createTaskForm').reset();
                    closeModal('createTaskModal');
                    await fetchTasks();
                }
            } catch (error) {
                console.error('Error creating task:', error);
            }
        }


        async function deleteTask(taskId) {
            if (!confirm('Are you sure you want to delete this task?')) {
                return;
            }

            try {
                const response = await fetch(`/api/task/${taskId}`, {
                    method: 'DELETE'
                });

                const data = await handleResponse(response, 'Error deleting task');
                if (data) {
                    await fetchTasks();
                }
            } catch (error) {
                console.error('Error deleting task:', error);
            }
        }
        // Update the sorting related functions
        function toggleSort(field) {
            if (currentSort.field === field) {
                currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
            } else {
                currentSort.field = field;
                currentSort.direction = 'asc';
            }
            
            applyFiltersAndSort();
            updateSortLabels();
        }

        function clearSort() {
            currentSort.field = null;
            currentSort.direction = 'asc';
            applyFiltersAndSort();
            updateSortLabels();
        }

        function updateSortLabels() {
            // Clear all active states and directions
            document.querySelectorAll('.sort-label').forEach(label => {
                label.classList.remove('active');
            });
            document.querySelectorAll('.sort-direction').forEach(direction => {
                direction.textContent = '';
            });
            
            // Update the active sort if there is one
            if (currentSort.field) {
                const label = document.querySelector(`.sort-label[onclick*="${currentSort.field}"]`);
                const direction = document.getElementById(`${currentSort.field}-direction`);
                
                if (label && direction) {
                    label.classList.add('active');
                    direction.textContent = currentSort.direction === 'asc' ? '↑ Ascending' : '↓ Descending';
                }
            }
        }
        function updateCategoryFilters() {
            const categoryFilterSection = document.getElementById('categoryFilters');
            if (!categories || categories.length === 0) {
                categoryFilterSection.innerHTML = '<p class="empty-state">No categories available</p>';
                return;
            }

            categoryFilterSection.innerHTML = categories.map(category => `
                <label class="checkbox-label">
                    <input type="checkbox" 
                            data-filter="category-${category._id}"
                            onchange="toggleFilter('category', '${category._id}')"
                    >
                    <div class="category-indicator" style="background-color: ${category.colorHex}"></div>
                    ${category.name}
                </label>
            `).join('');
        }
        function clearFilters() {
            activeFilters = {
                status: [],
                priority: [],
                category: []
            };
            
            // Uncheck all checkboxes
            document.querySelectorAll('.checkbox-label input[type="checkbox"]').forEach(checkbox => {
                checkbox.checked = false;
            });
            
            applyFiltersAndSort();
        }

        
    </script>
</head>
<body>
    <div class="container">
        <a href="/token/manage" class="back-link" id="api-tokens-button">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M21 2l-2 2m-7.61 7.61a5.5 5.5 0 1 1-7.778 7.778 5.5 5.5 0 0 1 7.777-7.777zm0 0L15.5 7.5m0 0l3 3L22 7l-3-3m-3.5 3.5L19 4"></path>
            </svg>
            Manage API Tokens
        </a>
        <h1>Welcome, <%= user.name %>!</h1>
        <div id="taskList" class="task-list">
        </div>

        <!-- Floating Action Buttons -->
        <div class="fab-container">
            <button class="fab fab-category" onclick="openModal('categoryModal')" title="Manage Categories">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M4 9h16"></path>
                    <path d="M4 15h16"></path>
                    <path d="M10 3v18"></path>
                    <path d="M14 3v18"></path>
                </svg>
            </button>
            <button class="fab fab-sort" onclick="openModal('sortModal')" title="Sort Tasks">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M11 5h10"></path>
                    <path d="M11 9h7"></path>
                    <path d="M11 13h4"></path>
                    <path d="M3 17l3 3 3-3"></path>
                    <path d="M6 18V4"></path>
                </svg>
            </button>
            <button class="fab fab-filter" onclick="openModal('filterModal')" title="Filter Tasks">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3"></polygon>
                </svg>
            </button>
            <button class="fab fab-add" onclick="openModal('createTaskModal')" title="Create New Task">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <line x1="12" y1="5" x2="12" y2="19"></line>
                    <line x1="5" y1="12" x2="19" y2="12"></line>
                </svg>
            </button>
        </div>
        
        <!-- Create Task Modal -->
        <div id="createTaskModal" class="modal">
            <div class="modal-content">
                <button class="close-modal" onclick="closeModal('createTaskModal')">&times;</button>
                <h2>Create New Task</h2>
                <form id="createTaskForm" onsubmit="createTask(event)">
                    <div class="form-group">
                        <label for="taskTitle">Title</label>
                        <input type="text" id="taskTitle" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="taskDescription">Description</label>
                        <textarea id="taskDescription" required></textarea>
                    </div>
                    
                    <div class="form-group">
                        <label for="taskDueDate">Due Date</label>
                        <input type="date" id="taskDueDate" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="taskStatus">Status</label>
                        <select id="taskStatus">
                            <option value="pending">Pending</option>
                            <option value="in-progress">In Progress</option>
                            <option value="completed">Completed</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="taskPriority">Priority</label>
                        <select id="taskPriority">
                            <option value="low">Low</option>
                            <option value="medium">Medium</option>
                            <option value="high">High</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="taskTags">Tags (comma-separated)</label>
                        <input type="text" id="taskTags" placeholder="e.g., work, urgent, meeting">
                    </div>
                    
                    <div class="form-group">
                        <label for="taskCategory">Category</label>
                        <select id="taskCategory">
                            <option value="">No Category</option>
                        </select>
                    </div>
                    
                    <div class="button-group">
                        <button type="button" class="secondary-button" onclick="closeModal('createTaskModal')">Cancel</button>
                        <button type="submit" class="primary-button">Create Task</button>
                    </div>
                </form>
            </div>
        </div>
        <!-- Sort Modal -->
        <div id="sortModal" class="modal">
            <div class="modal-content">
                <button class="close-modal" onclick="closeModal('sortModal')">&times;</button>
                <h2>Sort Tasks</h2>
                
                <div class="sort-section">
                    <div class="sort-option">
                        <label class="sort-label" onclick="toggleSort('dueDate')">
                            <div class="sort-icon">
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                                    <line x1="16" y1="2" x2="16" y2="6"></line>
                                    <line x1="8" y1="2" x2="8" y2="6"></line>
                                    <line x1="3" y1="10" x2="21" y2="10"></line>
                                </svg>
                            </div>
                            <span>Due Date</span>
                            <span class="sort-direction" id="dueDate-direction"></span>
                        </label>
                    </div>
                    
                    <div class="sort-option">
                        <label class="sort-label" onclick="toggleSort('priority')">
                            <div class="sort-icon">
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <path d="M2 20h.01"></path>
                                    <path d="M7 20v-4"></path>
                                    <path d="M12 20v-8"></path>
                                    <path d="M17 20v-12"></path>
                                </svg>
                            </div>
                            <span>Priority</span>
                            <span class="sort-direction" id="priority-direction"></span>
                        </label>
                    </div>
                    
                    <div class="sort-option">
                        <label class="sort-label" onclick="toggleSort('status')">
                            <div class="sort-icon">
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                                    <polyline points="22 4 12 14.01 9 11.01"></polyline>
                                </svg>
                            </div>
                            <span>Status</span>
                            <span class="sort-direction" id="status-direction"></span>
                        </label>
                    </div>
                </div>
                
                <div class="button-group">
                    <button type="button" class="secondary-button" onclick="clearSort()">Clear Sort</button>
                    <button type="button" class="primary-button" onclick="closeModal('sortModal')">Done</button>
                </div>
            </div>
        </div>
        <!-- Filter Modal -->
        <div id="filterModal" class="modal">
            <div class="modal-content">
                <button class="close-modal" onclick="closeModal('filterModal')">&times;</button>
                <h2>Filter Tasks</h2>
                
                <div class="filter-section">
                    <h3>Status</h3>
                    <div class="checkbox-group">
                        <label class="checkbox-label">
                            <input type="checkbox" data-filter="status-pending" onchange="toggleFilter('status', 'pending')">
                            Pending
                        </label>
                        <label class="checkbox-label">
                            <input type="checkbox" data-filter="status-in-progress" onchange="toggleFilter('status', 'in-progress')">
                            In Progress
                        </label>
                        <label class="checkbox-label">
                            <input type="checkbox" data-filter="status-completed" onchange="toggleFilter('status', 'completed')">
                            Completed
                        </label>
                    </div>
                </div>
                <!-- The filter tasks was having overflow issues, tep fix remove filter  -->
                <!-- <div class="filter-section">
                    <h3>Priority</h3>
                    <div class="checkbox-group">
                        <label class="checkbox-label">
                            <input type="checkbox" data-filter="priority-high" onchange="toggleFilter('priority', 'high')">
                            High
                        </label>
                        <label class="checkbox-label">
                            <input type="checkbox" data-filter="priority-medium" onchange="toggleFilter('priority', 'medium')">
                            Medium
                        </label>
                        <label class="checkbox-label">
                            <input type="checkbox" data-filter="priority-low" onchange="toggleFilter('priority', 'low')">
                            Low
                        </label>
                    </div>
                </div> -->
                <div class="filter-section category-list">
                    <h3>Categories</h3>
                    <div id="categoryFilters" class="checkbox-group">
                    </div>
                </div>

                <div class="button-group">
                    <button type="button" class="secondary-button" onclick="clearFilters()">Clear Filters</button>
                    <button type="button" class="primary-button" onclick="closeModal('filterModal')">Apply Filters</button>
                </div>
            </div>
        </div>
    <!-- Edit Task Modal -->
    <div id="editTaskModal" class="modal">
        <div class="modal-content">
            <button class="close-modal" onclick="closeModal('editTaskModal')">&times;</button>
            <h2>Edit Task</h2>
            <form id="editTaskForm" onsubmit="updateTask(event)">
                <input type="hidden" id="editTaskId">
                
                <div class="form-group">
                    <label for="editTaskTitle">Title</label>
                    <input type="text" id="editTaskTitle" required>
                </div>
                
                <div class="form-group">
                    <label for="editTaskDescription">Description</label>
                    <textarea id="editTaskDescription" required></textarea>
                </div>
                
                <div class="form-group">
                    <label for="editTaskDueDate">Due Date</label>
                    <input type="date" id="editTaskDueDate" required>
                </div>
                
                <div class="form-group">
                    <label for="editTaskStatus">Status</label>
                    <select id="editTaskStatus">
                        <option value="pending">Pending</option>
                        <option value="in-progress">In Progress</option>
                        <option value="completed">Completed</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="editTaskPriority">Priority</label>
                    <select id="editTaskPriority">
                        <option value="low">Low</option>
                        <option value="medium">Medium</option>
                        <option value="high">High</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="editTaskTags">Tags (comma-separated)</label>
                    <input type="text" id="editTaskTags" placeholder="e.g., work, urgent, meeting">
                </div>

                <div class="form-group">
                    <label for="editTaskCategory">Category</label>
                    <select id="editTaskCategory">
                        <option value="">No Category</option>
                    </select>
                </div>

                <div class="button-group">
                    <button type="button" class="secondary-button" onclick="closeModal('editTaskModal')">Cancel</button>
                    <button type="submit" class="primary-button">Update Task</button>
                </div>
            </form>
        </div>
    </div>
    <!-- Category Management Modal -->
<div id="categoryModal" class="modal">
    <div class="modal-content">
        <button class="close-modal" onclick="closeModal('categoryModal')">&times;</button>
        <h2>Manage Categories</h2>
        
        <!-- Category List -->
        <div id="categoryList" class="category-list">
        </div>

        <!-- Create Category Form -->
        <form id="createCategoryForm" onsubmit="createCategory(event)" class="create-category-form">
            <div class="form-group">
                <label for="categoryName">Category Name</label>
                <input type="text" id="categoryName" required>
            </div>
            
            <div class="form-group">
                <label for="categoryColor">Color</label>
                <input type="color" id="categoryColor" required>
            </div>
            
            <div class="button-group">
                <button type="button" class="secondary-button" onclick="closeModal('categoryModal')">Cancel</button>
                <button type="submit" class="primary-button">Create Category</button>
            </div>
        </form>
    </div>
</div>
</div>
</body>
</html>